to citizen_behavior
  ask citizens [
    if state = "in-prison" [in-prison]                                     ;reaktiv prio 1
    if state = "in-restaurant" [in-restaurant]                             ;reaktiv IDELstate
    if state = "running-away" [running-away]                               ;reaktiv prio 2
    if state = "going-back-to-restaurant" [going-back-to-restaurant]       ;reaktiv prio 3
    if state = "deciding-to-run" [deciding-to-run]                         ;proactiv
  ]
end

to in-restaurant
  ; Code for behavior when citizen is in a restaurant
  set previous-state state
  let nearby-police other cops in-radius citizen-vision
  if any? nearby-police with [region = "RESTAURANT"] 
  [
    set state "deciding-to-run"
  ]
end

to in-prison
  set previous-state state
  
  if inPrison? = true [
    ; Behavior when citizen is in prison
    set jailtime jailtime + 1 ; Counting the time in prison
    print (word "citizen " who " is in prison since: " jailtime)
    if jailtime > jailsentence [
    ; Behavior when citizen is released from prison
    set jailtime 0
    ; Move forward where there are no cops and is not prison
    let places neighborhood with [not any? cops-here and pcolor != brown and pcolor = orange]
    if any? places [move-to one-of places]
    set inPrison? false
    set color yellow
    print (word "citizen " who " is released from prison")
    move-to one-of patches with [not any? turtles-here and region != "PRISON" and region != "RESTURANT"]
    set at-restaurant? false
    set state "going-back-to-restaurant"
  ]
    
  ] 
  
end

to running-away
  set previous-state state
  ; Run away from the current position
  rt random 360  ; Random direction
  fd speed   ; Increase the distance covered when running away

  ; Ensure the citizen moves to a location sufficiently far from the original threat
  let safe-place one-of patches with [region != "PRISON" and region != "RESTAURANT" and not any? cops-here]
  if safe-place != nobody [
    move-to safe-place
    set at-restaurant? false
  ]
  set state "going-back-to-restaurant"
end
  

to going-back-to-restaurant
  ; Code for behavior when citizen is going back to a restaurant
  set previous-state state
 face one-of patches with [region = "RESTAURANT"]
  
  ; Move the citizen towards the restaurant with the specified speed
  while [at-restaurant? = false] [
    forward speed
    if any? patches in-radius 1 with [region = "RESTAURANT"] [
      ; If the citizen is on or near the restaurant, end the loop
      set state "in-restaurant"
      set at-restaurant? true
    ]
  ]
end

to deciding-to-run
  ; Code for behavior when citizen is deciding to run
   set previous-state state
let nearby-citizens other citizens in-radius citizen-vision with [region = "RESTAURANT"]
  if any? nearby-citizens [
    ask one-of nearby-citizens [
      ifelse random 100 < 60 [  ; 60% chans att bestämma sig för att springa
        print (word "citizen " who " has decided to run")
        set state "running-away"
      ] [
        print (word "citizen " who " has decided not to run")
        set state "in-restaurant"
      ]
    ]
  ]
end

to gotoprison 
  ; set flag
  set inPrison? true
  set color red
  ; move to prison into an own cell (=own patch)
  move-to one-of patches with [not any? turtles-here and region = "PRISON"]
  set state "in-prison"
end
